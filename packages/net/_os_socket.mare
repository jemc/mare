:import "os/error"

:primitive _OSSocket
  :fun level_socket  I32: LibPonyOs.pony_os_sockopt_level(4138)
  :fun option_error  I32: LibPonyOs.pony_os_sockopt_option(827)
  :fun option_rcvbuf I32: LibPonyOs.pony_os_sockopt_option(884)
  :fun option_sndbuf I32: LibPonyOs.pony_os_sockopt_option(903)

  :fun connect_tcp (owner, host String, service String, from String, asio_flags)
    LibPonyOs.pony_os_connect_tcp(
      owner, host.cstring, service.cstring, from.cstring, asio_flags)

  :fun listen_tcp (owner, host String, service String)
    event = LibPonyOs.pony_os_listen_tcp(owner, host.cstring, service.cstring)
    if event.is_not_null (event | LibPonyOs.pony_os_errno)

  :fun accept (event) U32
    LibPonyOs.pony_os_accept(event)

  :fun close (fd U32)
    LibPonyOs.pony_os_socket_close(fd)

  :fun shutdown (fd U32)
    LibPonyOs.pony_os_socket_shutdown(fd)

  :fun writev (event CPointer(AsioEvent), buffers Array(USize), count USize)
    LibPonyOs.pony_os_writev(event, buffers.cpointer, count)

  :fun recv! (event CPointer(AsioEvent), buffer Bytes'ref, offset USize = 0)
    LibPonyOs.pony_os_recv!(event, buffer.cpointer(offset), buffer.space - offset)

  :fun check_os_error (fd U32) OSError
    option_max_size USize = 4
    option_size = [option_max_size] // TODO: use ffi_address_of instead?
    option = Bytes.new(option_max_size)
    result = LibC.getsockopt(
      fd, @level_socket, @option_error, option.cpointer, option_size.cpointer
    )

    if (result != 0) (
      // Nonzero result indicates that the getsockopt call itself failed.
      // So we fetch errno, which holds the OSError for the failed call.
      LibPonyOs.pony_os_errno
    |
      // Use the option_size value from the getsockopt call to trim the size
      // of the option result, as demanded by the getsockopt convention.
      options_size_value = try (option_size[0]! | 0)
      option.resize_possibly_including_uninitialized_memory(options_size_value)

      // Convert the 4-byte array to the equivalent 32-bit OSError value.
      // TODO: Should OSError enum provide a from_u32! method?
      try (OSError.from_u64!(option.read_native_u32!(0).u64) | EINVAL)
    )
