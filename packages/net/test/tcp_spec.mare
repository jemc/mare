:import "spec"
:import ".." (
  TCPConnection
  TCPConnectionNotify
  TCPListener
  TCPListenerNotify
)

:class iso TCPSpecListenerNotify
  :is TCPListenerNotify
  :prop env Env
  :new (@env)

  :fun ref listening (listen TCPListener'ref)
    // TODO: get port dynamically instead of hard-coding it.
    TCPConnection.new(
      TCPSpecNotify.new(@env)
      "localhost"
      Inspect[listen.local_address.port].clone // TODO: shouldn't need clone
    )
    @env.err.print("[Listener] Listening")

  :fun ref not_listening (listen TCPListener'ref) None
    @env.err.print("[Listener] Not listening:")
    @env.err.print(listen.listen_error.name)

  :fun ref closed (listen TCPListener'ref): None
    @env.err.print("[Listener] Stopped listening")

  :fun ref connected! (listen TCPListener'ref) TCPConnectionNotify'iso
    TCPSpecEchoNotify.new(@env)

:class iso TCPSpecEchoNotify
  :is TCPConnectionNotify
  :prop env Env
  :new (@env)

  :fun ref accepted (conn TCPConnection'ref)
    @env.err.print("[Echoer] Accepted")

  :fun ref connecting (conn TCPConnection'ref, count U32)
    @env.err.print("[Echoer] Connecting")

  :fun ref connected (conn TCPConnection'ref)
    @env.err.print("[Echoer] Connected")

  :fun ref connect_failed (conn TCPConnection'ref)
    @env.err.print("[Echoer] Failed to connect:")
    @env.err.print(conn.connect_error.name)

  :fun ref closed (conn TCPConnection'ref)
    @env.err.print("[Echoer] Closed")
    try conn.listen.as!(TCPListener).dispose

  :fun ref sent (conn TCPConnection'ref, data String)
    @env.err.print("[Echoer] Sent:")
    @env.err.print(data)
    data

  :fun ref received (conn TCPConnection'ref, data String, call_count USize)
    @env.err.print("[Echoer] Received:")
    @env.err.print(data)
    conn.write(data)
    conn.dispose
    True

:class iso TCPSpecNotify
  :is TCPConnectionNotify
  :prop env Env
  :new (@env)

  :fun ref accepted (conn TCPConnection'ref)
    @env.err.print("[Sender] Accepted")

  :fun ref connecting (conn TCPConnection'ref, count U32)
    @env.err.print("[Sender] Connecting")

  :fun ref connected (conn TCPConnection'ref)
    @env.err.print("[Sender] Connected")
    conn.write("Hello, World!")
    try conn.expect!(5)
    None

  :fun ref connect_failed (conn TCPConnection'ref)
    @env.err.print("[Sender] Failed to connect:")
    @env.err.print(conn.connect_error.name)

  :fun ref closed (conn TCPConnection'ref)
    @env.err.print("[Sender] Closed")

  :fun ref sent (conn TCPConnection'ref, data String)
    @env.err.print("[Sender] Sent:")
    @env.err.print(data)
    data

  :fun ref received (conn TCPConnection'ref, data String, call_count USize)
    @env.err.print("[Sender] Received:")
    @env.err.print(data)
    case (
    | data == "Hello" | try conn.expect!(2)
    | data == ", " | try conn.expect!(5)
    | data == "World" | try conn.expect!(0)
    | data == "!" | conn.dispose
    )
    True

:class TCPSpec
  :is Spec
  :const describes: "TCP"

  :it "can listen, connect, send, respond, disconnect, and stop listening"
    TCPListener.new(TCPSpecListenerNotify.new(@env))
