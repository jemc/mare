:import "spec"
:import "io"
:import "os/error" // TODO: remove?

:class iso TCPSpecListenerNotify
  :is TCPListenerNotify
  :prop env Env
  :new (@env)

  :fun ref listening(listen TCPListener'ref)
    TCPSpecEchoClient.new(@env, Inspect[listen.local_address.port])
    @env.err.print("[Listener] Listening")

  :fun ref not_listening(listen TCPListener'ref) None
    @env.err.print("[Listener] Not listening:")
    @env.err.print(listen.listen_error.name)

  :fun ref closed(listen TCPListener'ref): None
    @env.err.print("[Listener] Stopped listening")

  :fun ref connected!(listen TCPListener'ref, ticket TCPAcceptTicket)
    TCPSpecEchoer.new(@env, listen, --ticket)

:actor TCPSpecEchoer
  :is IOActor(IOAction)
  :prop env Env
  :prop io TCPConnectionEngine
  :new (@env, listen, ticket)
    @io = TCPConnectionEngine.accept(@, listen, --ticket)
    @env.err.print("[Echoer] Accepted")

  :fun ref _io_react(action IOAction)
    case (
    | action == IOActionRead |
      @io.pending_reads -> (data |
        @env.err.print("[Echoer] Received:")
        @env.err.print(data.as_string)
        @io.write(data)
        @io.close
      )
    | action == IOActionClosed |
      @env.err.print("[Echoer] Closed")
      try @io.listen.as!(TCPListener).dispose
    )
    @

:actor TCPSpecEchoClient
  :is IOActor(IOAction)
  :prop env Env
  :prop io TCPConnectionEngine
  :new (@env, service)
    @io = TCPConnectionEngine.connect(@, "localhost", service)

    // TODO: Can we make this trigger _io_react with IOActionOpenFailed
    // automatically via the same mechanism we will use for queuing later
    // pending reads, instead of checking for this error case here?
    if (@io.connect_error != OSErrorNone) (
      @env.err.print("[EchoClient] Failed to connect:")
      @env.err.print(@io.connect_error.name)
    )

  :fun ref _io_react(action IOAction)
    case (
    | action == IOActionOpened |
      @env.err.print("[EchoClient] Connected")
      @io.write(b"Hello, World!")
      try @io.expect!(5)

    | action == IOActionOpenFailed |
      @env.err.print("[EchoClient] Failed to connect:")
      @env.err.print(@io.connect_error.name)

    | action == IOActionRead |
      @io.pending_reads -> (data |
        @env.err.print("[EchoClient] Received:")
        @env.err.print(data.as_string)
        case (
        | data == b"Hello" | try @io.expect!(2)
        | data == b", "    | try @io.expect!(5)
        | data == b"World" | try @io.expect!(0)
        | data == b"!"     | @io.close
        )
      )

    | action == IOActionClosed |
      @env.err.print("[EchoClient] Closed")
      try @io.listen.as!(TCPListener).dispose
    )
    @

:class TCPSpec
  :is Spec
  :const describes: "TCP"

  :it "can listen, connect, send, respond, disconnect, and stop listening"
    TCPListener.new(TCPSpecListenerNotify.new(@env))
