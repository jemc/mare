:class _Parser
  :prop _input: ""
  :prop _offset USize: 0
  :fun ref _reset: @_offset = 0

  :fun ref parse(@_input) Pattern
    @_reset
    @_parse

  :fun ref _parse Pattern
    choice = PatternChoice.new
    pattern Pattern = PatternNone.new

    @_input.each_byte -> (byte |
      pattern = case (
      | byte == '.' | pattern.concat(PatternAnyByte.new) // TODO: proper UTF-8
      | byte == '?' | pattern.with_question
      | byte == '*' | pattern.with_star
      | byte == '+' | pattern.with_plus
      | byte == '|' | choice.children.push(pattern), pattern = PatternNone.new
      |
        // TODO: proper UTF-8 support here
        char = PatternCharacter.new(byte, 0, 0, 0)
        pattern.concat(char)
      )
    )

    if choice.children.is_not_empty (
      choice.children.push(pattern)
      choice
    |
      pattern
    )

