:import "../micro_test" (MicroTest)

:primitive Err
  :fun non now!: @inner!
  :fun non inner!: error!

:primitive _EarlyReturn
  :fun non conditional(early Bool) U64
    if early (return 33)
    11

:class Container(A)
  :prop value A
  :new (@value)

:actor Main
  :new (env)
    test = MicroTest.new(env)
    test.print_line_break // TODO: move to MicroTest constructor and finalizer

    zero = U64[0]

    test["try error; with error"].pass = U64[33] == (
      try (error! | 33)
    )

    test["try: try error else error; with error"].pass = U64[33] == (
      try (try (error! | error!) | 33)
    )

    test["try: if error; without error"].pass = U64[33] == (
      try (
        if (zero > 1) (error! | 33)
      |
        11
      )
    )

    test["try: if error; with error"].pass = U64[33] == (
      try (
        if (zero < 1) (error! | 11)
      |
        33
      )
    )

    test["try: if else error; without error"].pass = U64[33] == (
      try (
        if (zero < 1) (33 | error!)
      |
        11
      )
    )

    test["try: if else error; with error"].pass = U64[33] == (
      try (
        if (zero > 1) (11 | error!)
      |
        33
      )
    )

    test["try: if error else error; with error"].pass = U64[33] == (
      try (
        if (zero < 1) (error! | error!)
      |
        33
      )
    )

    test["try: while error; without error"].pass = U64[33] == (
      try (
        while (zero > 1) (error! | 33)
      |
        11
      )
    )

    test["try: while error; with error"].pass = U64[33] == (
      try (
        while (zero < 1) (error! | 11)
      |
        33
      )
    )

    test["try: while else error; without error"].pass = U64[33] == (
      try (
        while (zero < 1) (zero = zero + 1, 33 | error!)
      |
        11
      )
    )

    test["try: while else error; with error"].pass = U64[33] == (
      try (
        while (zero > 1) (11 | error!)
      |
        33
      )
    )

    test["try: while error else error; with error"].pass = U64[33] == (
      try (
        while (zero < 1) (error! | error!)
      |
        33
      )
    )

    test["try call error; with error"].pass = U64[33] == (
      try (Err.now!, 11 | 33)
    )

    test["while; resulting in break value"].pass = U64[33] == (
      i = USize[0]
      while (i < 1) (i += 1, break 33 | 11)
    )

    test["while; resulting in continue value"].pass = U64[33] == (
      i = USize[0]
      while (i < 1) (i += 1, continue 33 | 11)
    )

    test["while; not executing the break"].pass = U64[33] == (
      i = USize[0]
      while (i < 1) (i += 1
        if (zero > 1) (break 22)
        33
      |
        11
      )
    )

    test["while; not executing the continue"].pass = U64[33] == (
      i = USize[0]
      while (i < 1) (i += 1
        if (zero > 1) (continue 22)
        33
      |
        11
      )
    )

    test["while; not using the value of the continue"].pass = U64[33] == (
      i = USize[0]
      while (i < 2) (i += 1
        if (i < 1) (continue 22)
        33
      |
        11
      )
    )

    test["return; with early return value"].pass =
      U64[33] == _EarlyReturn.conditional(True)

    test["return; with early return value"].pass =
      U64[11] == _EarlyReturn.conditional(False)

    test["reflection_of_type.string String"].pass =
      (reflection_of_type "example").string == "String"
    test["reflection_of_type.string String'ref"].pass =
      (reflection_of_type String.new).string == "String'ref"
    test["reflection_of_type.string Array(U8)"].pass =
      (reflection_of_type Array(U8).new).string == "Array(U8)"

    test["reflection_of_runtime_type_name U64"].pass =
      (reflection_of_runtime_type_name U64[0]) == "U64"
    string_or_none (String'ref | None) = None
    test["reflection_of_runtime_type_name None"].pass =
      (reflection_of_runtime_type_name string_or_none) == "None"
    string_or_none = String.new
    test["reflection_of_runtime_type_name String"].pass =
      (reflection_of_runtime_type_name string_or_none) == "String"

    test["source_code_position_of_argument string"].pass =
      @source_code_position_of_argument_string(zero == 0) == "zero == 0"

    container_string = Container(String).new("original")
    test["<<= result"].pass = (container_string.value <<= "new") == "original"
    test["<<= effect"].pass = container_string.value == "new"

    test.print_line_break // TODO: move to MicroTest constructor and finalizer

  :fun non source_code_position_of_argument_string(
    arg Bool
    pos SourceCodePosition = source_code_position_of_argument arg
  )
    pos.string
