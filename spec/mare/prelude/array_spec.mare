:import "spec"

:: A dummy class for use with identity-based equality testing.
:class ArraySpecOpaqueObject
  :new ref new
  :new iso new_iso

:class ArraySpec
  :is Spec
  :const describes: "Array"

  :it "pushes a new element onto the end of the array and reads them back out"
    array = Array(U64).new << 3 << 6
    @assert = try (array[0]! == 3 | False)
    @assert = try (array[1]! == 6 | False)
    @assert = try (array[1]! = 12, True | False)
    @assert = try (array[1]! == 12 | False)

  :it "can be written as an array literal"
    array = [U8[3], U8[6], U8[12]]
    @assert = array.size == 3
    @assert = try (array[0]! == 3 | False)
    @assert = try (array[1]! == 6 | False)
    @assert = try (array[2]! == 12 | False)
    @assert = try (array[3]!, False | True)

  :it "allows element assignment only within the existing bounds of the array"
    array Array(U8) = [3, 6, 12]
    @assert = try (array[3]!, False | True)
    @assert = try (array[3]! = 36, False | True)

  :it "can be cleared to an empty size"
    array Array(U8) = [3, 6, 12]
    array.clear
    @assert = array.size == 0
    @assert = try (array[0]!, False | True)

  :it "can reserve undefined space for numeric elements"
    array Array(U8) = [3, 6, 12]
    @assert = array.reserve_undefined(10) is array
    @assert = array.size  == 10
    @assert = array.space == 16

  :it "won't reserve undefined space for a non-numeric element type"
    array = ["foo", "bar", "baz"]
    @assert = array.reserve_undefined(10) is array
    @assert = array.size  == 3
    @assert = array.space == 16

  :it "compares equality for the elements in the array"
    @assert = Array(String).new == Array(String).new
    @assert = ["foo", "bar", "baz"] == ["foo", "bar", "baz"]
    @assert = ["foo", "bar", "baz"] != ["foo", "bar"]
    @assert = ["foo", "bar"] != ["foo", "bar", "baz"]
    @assert = ["foo", "bar", "baz"] != ["baz", "bar", "foo"]
    @assert = ["foo", "bar"] != ["food", "bar"]

  :it "clones itself into a new array"
    array Array(U8) = [3, 6, 12]
    @assert = array.clone == [3, 6, 12]

  :it "cannot clone if the elements aren't aliasable"
    array Array(ArraySpecOpaqueObject'iso) = [
      ArraySpecOpaqueObject.new_iso
      ArraySpecOpaqueObject.new_iso
      ArraySpecOpaqueObject.new_iso
    ]
    @assert = array.clone.size == 0

  :it "returns True if the given element is equal to one already in the array"
    @assert = ["foo", "bar", "baz"].includes("foo")
    @assert = ["foo", "bar", "baz"].includes("f").not

  :it "returns True if the given element is pointer-identical to one in the array"
    opaque_1 = ArraySpecOpaqueObject.new
    opaque_2 = ArraySpecOpaqueObject.new
    @assert = [opaque_1].includes(opaque_1)
    @assert = [opaque_1].includes(opaque_2).not

  :it "yields each element in the array"
    array Array(String) = []
    ["foo", "bar", "baz"].each -> (string | array << string)
    @assert = array == ["foo", "bar", "baz"]

  :it "yields each element in the array, along with the index"
    array_a Array(String) = []
    array_b Array(USize) = []
    ["foo", "bar", "baz"].each_with_index -> (string, index |
      array_a << string
      array_b << index
    )
    @assert = array_a == ["foo", "bar", "baz"]
    @assert = array_b == [0, 1, 2]

  :it "yields each element in the array, in reverse"
    array Array(String) = []
    ["foo", "bar", "baz"].reverse_each -> (string | array << string)
    @assert = array == ["baz", "bar", "foo"]

  :it "yields each element in the array, in reverse, along with the index"
    array_a Array(String) = []
    array_b Array(USize) = []
    ["foo", "bar", "baz"].reverse_each_with_index -> (string, index |
      array_a << string
      array_b << index
    )
    @assert = array_b == [2, 1, 0]
    @assert =
      array_a == ["baz", "bar", "foo"]

  :it "yields each element in the array, stopping early if the criteria is met"
    array Array(String) = []
    early_stop = ["foo", "bar", "baz"].each_until -> (string |
      array << string
      string == "bar"
    )
    @assert = early_stop == True
    @assert = array == ["foo", "bar"]

    array.clear
    early_stop = ["foo", "bar", "baz"].each_until -> (string |
      array << string
      string == "bard"
    )
    @assert = early_stop == False
    @assert = array == ["foo", "bar", "baz"]

  :it "selects those elements in the array that meet the criteria"
    array Array(U8) = [11, 22, 33, 44, 36, 27, 18]
    selected = array.select -> (num | num < 30)
    @assert = selected == [11, 22, 27, 18]

  :it "rejects those elements in the array that do not meet the criteria"
    array Array(U8) = [1, 2, 3, 4, 5]
    odds = array.reject -> (num | num % 2 == 0)
    @assert = odds == [1, 3, 5]

  :it "rejects nothing from an empty array"
    array Array(U8) = []
    @assert = array.reject -> (num | num % 2 == 0) == array

  :it "rejects nothing if criteria is always false"
    array Array(U8) = [1, 2, 3]
    @assert = array.reject -> (num | False) == array

  :it "sorts the elements in the array"
    array Array(U8) = [
      13, 25, 7, 36, 30, 11, 29, 8, 5, 15, 21, 24
      28, 10, 1, 14, 34, 2, 6, 23, 31, 16, 20, 26
      32, 9, 12, 17, 3, 35, 18, 22, 19, 27, 33, 4
    ]

    @assert = array.sort == [
       1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12
      13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24
      25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36
    ]

  :it "cannot sort elements that aren't comparable"
    array Array(ArraySpecOpaqueObject) = [
      ArraySpecOpaqueObject.new
      ArraySpecOpaqueObject.new
      ArraySpecOpaqueObject.new
    ]

    @assert = array.sort == []
